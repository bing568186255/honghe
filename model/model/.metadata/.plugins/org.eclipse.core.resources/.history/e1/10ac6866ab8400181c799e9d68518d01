/*
 * config:
 * 		id
 *		head:[{
 *				type: index/field/operate,
 *				name: fieldName,
 *				display: display name
 *				headClass: class name,
 *				class: class name,
 *				fun: field show callback or operate show callback, 
 *					paras:  operate:rowIndex、data; field: rowIndex、value
 *				width: 100, maxWidth: 100,
 *				hidden: true/false, default false
 *				isKey: true/false, default false
 *			},...]
 *		rangeHead:[{display: head name,class: class name, start:2,end:4},...]
 *		url
 *		needPage:		default true
 *		chgPagesize:	user change page size
 *		error:			error callback
 *		allMsg:			read data from server,param:msg
 *		beforeSearch:	before commit ajax
 *		afterSearch:	after read data and show
 *		getRows:		after get data from server
 *		showRow:		before show row data, return class name; params: rowIndex, rowData
 *		afterShow:		after show row data
 *		chgPage:		change current page
 *		timeout: default 30000
 *		clickShowRow: show light background while click,default false
 *		afterEdit:		after edit td,params: td and this
 * set:
 *		addRow: {fieldName: value...}
 *		delRow: {row:0, key: value}
 *		clear: delete all row
 * get:
 * search:
 */
$(function(){
	var jsPath = getJSPath("datagrid.js");
	$("<link>").attr(
		{
			rel: "stylesheet",
			type: "text/css",
			href: jsPath + "datagrid.css"
		}
	).appendTo("head");
});
function DatagridModule(){
	this.name = "datagrid";
	this.showtb = null;
	this.ctrl = null;
	this.commitData = "";
	this.curPage = 1;
	this.totalPage = 0;
	this.para={};
	this.para["needPage"] = true;
	this.para["timeout"] = 30000;
	this.para["class"] = "";
	this.config = function(cfg){
		$.extend(this.para,cfg);
		if (null != this.para["id"] && undefined != this.para["id"])
			this.id=this.para["id"];
		return this;
	};
	this.initDom = function(){
		if (null != this.mydom)
			return;
		this.mydom = $('<div class="DatagridModule '+this.para["class"]+'"></div>');
		if (this.id != '')
			this.mydom.attr('id',this.id);
		this.showtb = $('<table class="DatagridModule-show"><thead><tr></tr></thead></table>');
		if (typeof this.para["tbWidth"] == "number"){
			this.showtb.css('width',this.para["tbWidth"]);
		}
		var headTr = this.showtb.find('thead tr');
		var headTr2 = this.showtb.find('thead tr').eq(1);
		for(var i=0;i<this.para["head"].length;i++){
			var head = this.para["head"][i];
			var rowspan="";
			var firstTr = true;
			if (null != this.para["rangeHead"]){
				var isInRange = false;
				for(var j=0;j<this.para["rangeHead"].length;j++){
					var rangeHead =this.para["rangeHead"][j]; 
					if (i >= rangeHead["start"] &&
						i <= rangeHead["end"]){
						isInRange = true;
						if (i==rangeHead["start"]){
							var cols = rangeHead["end"] - rangeHead["start"] + 1;
							var th = $("<th colspan="+cols+" >"+rangeHead["display"]+"</th>");
							if (null != rangeHead["class"])
								th.addClass(rangeHead["class"]);
							headTr.append(th);
						}
						break;
					}
				}
				if (isInRange){
					firstTr = false;
				}else{
					rowspan = " rowspan=2 ";
				}
			}
			var th = $("<th"+rowspan+">"+head["display"]+"</th>");
			if (null != head["headClass"]){
				th.addClass(head["headClass"]);
			}
			if (typeof head["width"] == "number"){
				th.css('width',head["width"]);
			}else if (typeof head["maxWidth"] == "number"){
				th.css('maxWidth',head["maxWidth"]);
			}
			if (true == head["hidden"])
				th.hide();
			if (firstTr){
				headTr.append(th);
			}else{
				headTr2.append(th);
			}
		}
		if (true == this.para["clickShowRow"]){
			this.showtb.on('click','tbody tr',function(){
				$(this).parent().find('tr').removeClass("selected");
				$(this).addClass("selected");
			});
		}
		this.showtb.on('dblclick','td.edittd',function(event){
			var item = $(event.target);
			if (item.parents('tr').hasClass('forbidEdit'))
				return;
			if (typeof this.para["beforeEdit"] == "function"){
				this.para["beforeEdit"](item);
			}
			var input = $('<input type="text" class="tdeditinput"/>');
			var edittype = item.attr('edittype');
			if ('onlynum' == edittype){
				input.addClass("onlynum");
				input.keypress(onlyNum);
			}else if ('onlyfloat' == edittype){
				input.addClass("onlyfloat");
				input.keypress(onlyFloat);
			}else if ('percent' == edittype){
				input.addClass("percent");
				input.keypress(onlyFloat);
			}
			input.width(item.width() - 4);
			input.height(item.height() - 4);
			input.val(item.html());
			item.append(input);
			input.blur(function(event){
				var item = $(event.target);
				var value = item.val();
				if (item.hasClass("onlyfloat") || item.hasClass("percent")){
					value = parseFloat(value);
					if (isNaN(value))
						value="0.00";
					else
						value = value.toFixed(2);
				}else if (item.hasClass("onlynum")){
					value = parseInt(value);
					if (isNaN(value)) value="0";
				}
				var td =item.parent();
				td.html(value);
				if (typeof this.para["afterEdit"] == "function"){
					this.para["afterEdit"](td,this);
				}
				item.remove();
			}.bind(this));
			input.focus();
		}.bind(this));
		this.mydom.append(this.showtb);
		if(false != this.para["needPage"]){
			this.ctrl = $('<div class="DatagridModule-ctrl"></div>');
			var ctrlLeft = $('<div class="DatagridModule-ctrl-left"></div>');
			ctrlLeft.append('<span>每页显示：</span>');
			var selPageSize=$('<select></select>');
			selPageSize.append('<option value="1">1</option>');
			selPageSize.append('<option value="10">10</option>');
			selPageSize.append('<option value="20" selected>20</option>');
			selPageSize.append('<option value="50">50</option>');
			selPageSize.append('<option value="100">100</option>');
			selPageSize.append('<option value="200">200</option>');
			selPageSize.bind('change',function(){this.changePageSize();}.bind(this));
			ctrlLeft.append(selPageSize);
			ctrlLeft.append('<span> 条</span>');
			this.ctrl.append(ctrlLeft);
			
			var ctrlRight = $('<div class="DatagridModule-ctrl-right"></div>');
			var pageSel = $('<a class="firstPage disable" href="javascript:void(0)">首页</a>');
			pageSel.bind('click',function(){this.firstPage();}.bind(this));
			ctrlRight.append(pageSel);
			pageSel = $('<a class="prevPage disable" href="javascript:void(0)">上页</a>');
			pageSel.bind('click',function(){this.prevPage();}.bind(this));
			ctrlRight.append(pageSel);
			ctrlRight.append('<span class="pagenum"><span class="curPage"></span>&nbsp;&frasl;&nbsp;<span class="totalPage"></span></span>');
			pageSel = $('<a class="nextPage disable" href="javascript:void(0)">下页</a>');
			pageSel.bind('click',function(){this.nextPage();}.bind(this));
			ctrlRight.append(pageSel);
			pageSel = $('<a class="lastPage disable" href="javascript:void(0)">尾页</a>');
			pageSel.bind('click',function(){this.lastPage();}.bind(this));
			ctrlRight.append(pageSel);
			this.ctrl.append(ctrlRight);
			
			this.mydom.append(this.ctrl);
		}
		
		if (this.id != ''){
			this.mydom.attr('id',this.id);
			DatagridModule.grids[this.id] = this.mydom;
		}
	};
	this.render = function(dom){
		this.initDom();
		if (null == this.mydom)
			return;
		this.setParent(dom);
		if (null != this.parent)
			this.mydom.appendTo(this.parent);
		return this;
	};
	this.set = function(name,value){
		if (name == "addRow"){
			if(null != value.rowIndex)
				return this.rowData(value,value.rowIndex);
			else
				return this.rowData(value);
		}else if (name == "delRow"){
			if (null != value['row'] && undefined != value['row']){
				this.showtb.find('tbody tr').eq(value['row']).remove();
			}else if (null != value['key'] && undefined != value['key']){
				this.showtb.find('tbody tr[key='+value['key']+']').remove();				
			}
		}else if (name == "clear"){
			this.showtb.find('tbody tr').remove();
		}else if (name == "addTotal"){
			this.addTotalRow();
		}
		return this;
	};
	this.search=function(data){
		if (null == this.para["url"] || undefined == this.para["url"] || ""==this.para["url"]){
			return;
		}
		if (null != data && undefined != data)
			this.commitData = data;
		else
			this.commitData = "";
		this._search(this.commitData,1);
	};
	this._search=function(data,page){
		var url = this.para["url"];
		if(false != this.para["needPage"]){
			var pagesize = this.ctrl.find('select').val();
			if (url.indexOf("?")>=0){
				url += '&pagesize='+pagesize+'&curpage='+page;
			}else{
				url += '?pagesize='+pagesize+'&curpage='+page;
			}
		}
		if (typeof this.para["beforeSearch"] == "function"){
			this.para["beforeSearch"]();
		}
		this.showtb.find('tbody tr').remove();
		$.ajax({
			type : "post",
			url : url,
			dataType : 'json',
			data :data,   
			timeout : this.para["timeout"],
			success : function(msg, status) {
				if (msg.status == 200) {
					if (typeof this.para["allMsg"] == "function"){
						this.para["allMsg"](msg);
					}
					this.rowsData(msg.rows);
					if (null != msg.totalPages && (false != this.para["needPage"])){
						var curP = parseInt(msg.curPage);
						var totalP = parseInt(msg.totalPages);
						if (isNaN(totalP)) totalP = 0;
						if (totalP < 1) curP = 0;
						this.updateCurPage(curP,totalP);
					}
					if (typeof this.para["afterSearch"] == "function"){
						this.para["afterSearch"](this,msg.rows);
					}
				}else{
					if (typeof this.para["error"] == "function"){
						this.para["error"](msg.msg);
					}
				}
			}.bind(this),
			error: function(){
				if (typeof this.para["error"] == "function"){
					this.para["error"]("服务器未回应，查询失败！");
				}				
			}.bind(this)
		});
	};
	this.rowsData = function(data){
		if (typeof this.para["getRows"] == "function"){
			this.para["getRows"](data);
		}
		for(var row=0;row<data.length;row++){
			var info = data[row];
			var rowClass = null;
			if (typeof this.para["showRow"] == "function"){
				rowClass = this.para["showRow"](row,info);
			}
			this.rowData(info,row,rowClass);
		}
		if (typeof this.para["afterShow"] == "function"){
			this.para["afterShow"](data);
		}
	};
	this.rowData = function(info,row,rowClass){
		var afterRow = null;
		if (null == row || undefined == row){
			row = this.showtb.find('tbody tr').length;
		}else if (row > 0){
			afterRow = this.showtb.find('tbody tr').eq(row - 1);
		}
		var trClass = (row%2==0)?'even':'odd';
		if(typeof rowClass == "string")
			trClass += " "+rowClass;
		var tr=$('<tr class="'+trClass+'"></tr>');
		var trHtml=[];
		for(var i=0;i<this.para["head"].length;i++){
			var head = this.para["head"][i];
			if (true == head["hidden"]){
				trHtml.push('<td style="display:none;');
			}else{
				trHtml.push('<td style="');								
			}
			if (typeof head["width"] == "number"){
				trHtml.push(' width:'+head["width"]+';');
			}else if (typeof head["maxWidth"] == "number"){
				trHtml.push(' maxWidth:'+head["maxWidth"]+';');
			}
			trHtml.push('"');
			if(null != head["name"] && undefined != head["name"]){
				trHtml.push(' name="'+head["name"]+'"');
			}
			var tdClass="";
			if(null != head["class"] && undefined != head["class"]){
				tdClass=head["class"];
			}
			if ('edit' == head["type"]){
				tdClass += " edittd";
				if(null != head["edittype"] && undefined != head["edittype"]){
					trHtml.push(' edittype="'+head["edittype"]+'"');
				}
			}
			trHtml.push(' class="'+tdClass+'"');
			trHtml.push('>');
			if ('index' == head["type"]){
				trHtml.push('' + (row+1));
			}else if ('operate' == head["type"]){
				if (typeof head["fun"]=="function")
					trHtml.push(head["fun"](row,info));
			}else{
				if(null != head["name"] && undefined != head["name"]){
					var fieldName = head["name"];
					if (null == info[fieldName]) info[fieldName]="";
					if (typeof head["fun"]=="function"){
						trHtml.push(head["fun"](row,info[fieldName],info));
						if (true == head["isKey"]){
							tr.attr("key",info[fieldName]);
						}
					}else{
						var v = ''+info[fieldName];
						v = v.replace("\n","<br/>").replace("\r","<br/>");
						trHtml.push(v);
						if (true == head["isKey"]){
							tr.attr("key",v);
						}
					}
				}
			}
			trHtml.push('</td>');
		}
		tr.append(trHtml.join(''));
		if(null == afterRow)
			this.showtb.append(tr);
		else
			tr.insertAfter(afterRow);
		return tr;
	};
	this.addTotalRow = function(){
		var tr=$('<tr class="totalRow"></tr>');
		var trHtml=[];
		for(var i=0;i<this.para["head"].length;i++){
			var head = this.para["head"][i];
			if (true == head["hidden"]){
				trHtml.push('<td style="display:none;');
			}else{
				trHtml.push('<td style="');								
			}
			trHtml.push('"');
			if(null != head["name"] && undefined != head["name"]){
				trHtml.push(' name="'+head["name"]+'"');
			}
			var tdClass="";
			if(null != head["class"] && undefined != head["class"]){
				tdClass=head["class"];
			}
			trHtml.push(' class="'+tdClass+'"');
			trHtml.push('></td>');
		}
		tr.append(trHtml.join(''));
		this.showtb.append(tr);
		return tr;
	};
	this.updateCurPage=function(curP,totalP){
		this.curPage = curP;
		this.totalPage = totalP;
		this.ctrl.find('span.curPage').html(curP);
		this.ctrl.find('span.totalPage').html(totalP);
		if (curP < 2){
			this.ctrl.find('a.firstPage').addClass("disable");
			this.ctrl.find('a.prevPage').addClass("disable");
		}else{
			this.ctrl.find('a.firstPage').removeClass("disable");
			this.ctrl.find('a.prevPage').removeClass("disable");							
		}
		if (curP >= totalP){
			this.ctrl.find('a.nextPage').addClass("disable");
			this.ctrl.find('a.lastPage').addClass("disable");							
		}else{
			this.ctrl.find('a.nextPage').removeClass("disable");
			this.ctrl.find('a.lastPage').removeClass("disable");							
		}
	};
	this.changePageSize=function(){
		if (typeof this.para["chgPagesize"] == "function"){
			this.para["chgPagesize"](this.ctrl.find('select').val());
		}
	};
	this.firstPage=function(){
		if (this.mydom.find('.firstPage').hasClass('disable'))
			return;
		if (typeof this.para["chgPage"] == "function"){
			this.para["chgPage"](1);
		}
		this._search(this.commitData,1);
	};
	this.prevPage=function(){
		if (this.mydom.find('.prevPage').hasClass('disable'))
			return;
		if (this.curPage < 2)
			return;
		this.curPage --;
		if (typeof this.para["chgPage"] == "function"){
			this.para["chgPage"](this.curPage);
		}
		this._search(this.commitData,this.curPage);
	};
	this.nextPage=function(){
		if (this.mydom.find('.nextPage').hasClass('disable'))
			return;
		if (this.curPage >= this.totalPage)
			return;
		this.curPage ++;
		if (typeof this.para["chgPage"] == "function"){
			this.para["chgPage"](this.curPage);
		}
		this._search(this.commitData,this.curPage);
	};
	this.lastPage=function(){
		if (this.mydom.find('.lastPage').hasClass('disable'))
			return;
		if (this.curPage >= this.totalPage)
			return;
		this.curPage = this.totalPage;
		if (typeof this.para["chgPage"] == "function"){
			this.para["chgPage"](this.curPage);
		}
		this._search(this.commitData,this.curPage);
	};
}
DatagridModule.grids={};
DatagridModule.prototype = new Module();
