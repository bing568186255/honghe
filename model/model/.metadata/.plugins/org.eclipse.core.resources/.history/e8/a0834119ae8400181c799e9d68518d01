package DragonNet.Dao;

import java.io.Reader;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

public class DBOA {
	private static SqlMapClient sqlMapClient = null;
	
	// 读取配置文件
	static{
		try {
			Reader reader = Resources.getResourceAsReader("OASqlConfig.xml");
			sqlMapClient = SqlMapClientBuilder.buildSqlMapClient(reader);
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	//读取项目信息
	public static List<HashMap> getProject(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getProject",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	
	//读取项目融资台账
	public static List<HashMap> getFinancing(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getFinancing",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//统计项目融资
	public static List<HashMap> statFinancing(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statFinancing",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//统计月份融资
	public static List<HashMap> statFinancingMon(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statFinancingMon",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}

	//项目节点完成列表
	public static List<HashMap> getProjectNode(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getProjectNode",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//项目最后节点
	public static List<HashMap> lastProjectNode(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("lastProjectNode",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	
	//项目异常信息列表
	public static List<HashMap> getProjectAbnormal(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getProjectAbnormal",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//统计项目异常个数
	public static List<HashMap> statProjectAbnormal(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statProjectAbnormal",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	
	//读取地块信息
	public static List<HashMap> getMassif(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getMassif",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	
	//读取地块支出台账
	public static List<HashMap> getExpend(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getExpend",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//统计地块支出
	public static List<HashMap> statExpend(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statExpend",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//按月统计支出
	public static List<HashMap> statExpendMon(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statExpendMon",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//统计项目支出
	public static List<HashMap> statExpendForProject(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statExpendForProject",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}

	//统计项目拆迁户数
	public static List<HashMap> statRemoveForProject(String projID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statRemoveForProject",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	
	//地块节点完成列表
	public static List<HashMap> getMassifNode(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getMassifNode",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	//地块最后节点
	public static List<HashMap> lastMassifNode(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("lastMassifNode",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}
	
	//地块异常信息列表
	public static List<HashMap> getMassifAbnormal(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("getMassifAbnormal",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}	
	//统计地块异常个数
	public static List<HashMap> statMassifAbnormal(String projID,String massifID){
		List<HashMap> hmList = null;
		try {
			HashMap hm = new HashMap();
			if (null != projID && !projID.isEmpty()){
				hm.put("projID",projID);
			}
			if (null != massifID && !massifID.isEmpty()){
				hm.put("massifID",massifID);
			}
			hmList = (List<HashMap>)sqlMapClient.queryForList("statMassifAbnormal",hm);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return hmList;		
	}	
}
