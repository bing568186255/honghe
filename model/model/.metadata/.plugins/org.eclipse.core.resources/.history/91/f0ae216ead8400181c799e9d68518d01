package DragonNet.Page;

import javax.servlet.*;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.servlet.*;
import org.apache.commons.fileupload.disk.*;
import java.util.List;
import java.io.*;
import java.lang.reflect.Method;
import java.math.BigDecimal;

import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.text.SimpleDateFormat;
import net.sf.json.*;
import DragonNet.Global.*;
import DragonNet.Dao.*;

public class AjaxPage extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private DBOperate dbOperate = null;
	
	protected void doRequest(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		String strAction = request.getParameter(GlobalConst.AJAX_PARAM_NAME);
		HashMap hm = new HashMap();
		if (strAction==null || strAction.isEmpty()){
			GlobalFun.WarningOut("strAction is empty in ajaxpage");
			hm.put("status", 400);
			hm.put("msg", "parameter is wrong!");
			String json = JSONObject.fromObject(hm).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		response.setContentType(GlobalConst.RESP_CONTENT_TYPE);
		response.setCharacterEncoding(GlobalConst.RESP_CHAR_ENCODING);
		try{
			Method method = this.getClass().getMethod(strAction, 
					new Class[]{HttpServletRequest.class,HttpServletResponse.class});
			if (null == method){
				hm.put("status", 400);
				hm.put("msg", "no action method!");				
			}else{
				method.invoke(this,
						new Object[]{request,response});
				return;
			}
		}catch(Exception e){
			e.printStackTrace();
			hm.put("status", 400);
			hm.put("msg", e.getMessage());
		}
		String json = JSONObject.fromObject(hm).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
		return;
	}
	
	public void doGet(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		doRequest(request,response);
	}
	public void doPost(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		doRequest(request,response);
	}

	//获取指定对象位置信息
	public void getLocation(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String objType = (String)request.getParameter("objtype");
		String objID = (String)request.getParameter("objid");
		if (null == objType || objType.isEmpty() || null == objID || objID.isEmpty()){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数错误！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		HashMap hm = new HashMap();
		hm.put("objType",objType);
		hm.put("objID",objID);
		List<HashMap> listLocation = DBOperate.getLocation(hm);
		HashMap hmData = null;
		if (null != listLocation && listLocation.size()>0){
			hmData = listLocation.get(0);
		}
		hmRet.put("status", 200);
		hmRet.put("data", hmData);											
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}
	
	//增加或修改对象位置信息
	public void editLocation(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		
		String objType = (String)request.getParameter("objtype");
		String objID = (String)request.getParameter("objid");
		String projID = (String)request.getParameter("projid");
		String locTypeStr = (String)request.getParameter("loctype");
		String lngStr = (String)request.getParameter("lng");
		String latStr = (String)request.getParameter("lat");
		String addr = (String)request.getParameter("addr");
		String polygon = (String)request.getParameter("polygon");
		
		int locType= 0;
		boolean bError = false;
		try{
			if (null == objType || objType.isEmpty() || null == objID || objID.isEmpty()
					|| null == locTypeStr || locTypeStr.isEmpty()){
				bError = true;
			}else{
				locType = Integer.parseInt(locTypeStr);
				if (objType.equals("area")){				//项目
					if (locType != 2 || null == polygon || polygon.isEmpty()){
						bError = true;
					}
				}else if (objType.equals("massif")){		//地块
					if (locType != 2 || null == polygon || polygon.isEmpty()
							|| null == projID || projID.isEmpty()){
						bError = true;
					}
				}else if (objType.equals("asset")){			//资产
				}else{
					bError = true;
				}
				if (!bError && locType == 1){
					float lng = Float.valueOf(lngStr);
					float lat = Float.valueOf(latStr);
				}
			}
		}catch(Exception e){
			bError = true;
		}
		if (bError){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数错误！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		HashMap hmValue = new HashMap();
		hmValue.put("objID", objID);
		hmValue.put("objType", objType);
		if (null != projID && !projID.isEmpty()){
			hmValue.put("projID",projID);
		}
		hmValue.put("locType",locType);
		if (locType == 1){
			hmValue.put("lng",lngStr);
			hmValue.put("lat",latStr);
			if (null != addr && !addr.isEmpty())
				hmValue.put("addr",addr);
		}else{
			hmValue.put("polygon",polygon);
		}
		
		boolean bRet = true;
		HashMap hm= new HashMap();
		hm.put("objID", objID);
		hm.put("objType", objType);
		List<HashMap> listLocation = DBOperate.getLocation(hm);
		if (null != listLocation && listLocation.size()>0){
			bRet = DBOperate.updateLocation(hmValue);
		}else{
			bRet = DBOperate.addLocation(hmValue);
		}
		if (bRet){
			hmRet.put("status", 200);
		}else{
			hmRet.put("status", 400);
			hmRet.put("msg", "数据库操作失败！");
		}
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有或指定项目的周边配套信息
	public void getFacility(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String projID = (String)request.getParameter("projid");
		HashMap hm = new HashMap();
		if (null != projID && !projID.isEmpty())
			hm.put("projID",projID);
		List<HashMap> listFacility = DBOperate.getFacilities(hm);
		hmRet.put("status", 200);
		hmRet.put("rows", listFacility);											
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}
	
	//增加或修改项目周边配套信息
	public void editFacility(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		
		String operate = (String)request.getParameter("op");
		String objID = (String)request.getParameter("id");
		String projID = (String)request.getParameter("projID");
		String locTypeStr = (String)request.getParameter("locType");
		String name = (String)request.getParameter("name");
		String largeType = (String)request.getParameter("largetype");
		String type = (String)request.getParameter("type");
		String create = (String)request.getParameter("create");
		String category = (String)request.getParameter("category");
		String lngStr = (String)request.getParameter("lng");
		String latStr = (String)request.getParameter("lat");
		String polygon = (String)request.getParameter("polygon");
		
		int locType= 0;
		Long id = null;
		boolean bError = false;
		HashMap hmValue = new HashMap();
		try{
			if (null == operate || operate.isEmpty()){
				bError = true;
			}else{ 
				if (null != locTypeStr && !locTypeStr.isEmpty())
					locType = Integer.parseInt(locTypeStr);
				if(operate.equals("add")){
					if (null == projID || projID.isEmpty() ||
							null == name || name.isEmpty() ||
							null == largeType || largeType.isEmpty() ||
							null == type || type.isEmpty() ||
							null == category || category.isEmpty() ||
							null == locTypeStr || locTypeStr.isEmpty()){
						bError = true;
					}else if (locType == 1){
						if (null == lngStr || lngStr.isEmpty() ||
								null == latStr || latStr.isEmpty()){
							bError = true;
						}else{
							float lng = Float.valueOf(lngStr);
							float lat = Float.valueOf(latStr);
							hmValue.put("lng",lngStr);
							hmValue.put("lat",latStr);
						}
					}else if (locType == 2){
						if (null == polygon || polygon.isEmpty()){
							bError = true;
						}else{
							hmValue.put("polygon",polygon);
						}
					}else{
						bError = true;
					}
					hmValue.put("projID", projID);
					hmValue.put("locType", locType);
				}else{
					if (null == objID || objID.isEmpty())
						bError = true;
					else{
						id = Long.valueOf(objID);
					}
					hmValue.put("id", id);
				}
			}
		}catch(Exception e){
			bError = true;
		}
		if (bError){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数错误！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		if (null != name && !name.isEmpty())
			hmValue.put("name", name);
		if (null != largeType && !largeType.isEmpty())
			hmValue.put("largeType", largeType);
		if (null != type && !type.isEmpty())
			hmValue.put("type", type);
		if (null != category && !category.isEmpty())
			hmValue.put("category", category);
		
		String scale = request.getParameter("scale");
		if (null != scale)
			hmValue.put("scale", scale);
		String remark = request.getParameter("remark");
		if (null != remark)
			hmValue.put("remark", remark);
		if (locType == 1){
			if (null != lngStr && !lngStr.isEmpty()){
				hmValue.put("lng",lngStr);
				hmValue.put("lat",latStr);
				hmValue.put("addr", request.getParameter("addr"));
			}
		}else if (locType == 2){
			if (null != polygon && !polygon.isEmpty()){
				hmValue.put("polygon", polygon);
			}
		}
		if (null != create && !create.isEmpty()){
			hmValue.put("create", create);
		}
		
		hmRet.put("status", 200);
		if (operate.equals("chg")){
			HashMap hm= new HashMap();
			hm.put("id", objID);
			List<HashMap> listFacility = DBOperate.getFacilities(hm);
			if (null == listFacility || listFacility.size() < 1){
				hmRet.put("status", 400);
				hmRet.put("msg", "不存在指定的周边配套信息！");
				id=null;
			}else if (!DBOperate.updateFacility(hmValue)){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
				id=null;
			}
		}else{
			id = DBOperate.addFacility(hmValue);
			if (null == id){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
			}
		}
		if(id != null){
			HashMap hm= new HashMap();
			hm.put("id", id);
			List<HashMap> listFacility = DBOperate.getFacilities(hm);
			if (null == listFacility || listFacility.size() < 1){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
			}else{
				hmRet.put("info",listFacility.get(0));
			}
		}
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//删除项目周边配套信息
	public void delFacility(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		
		String objID = (String)request.getParameter("id");
		Long id = null;
		boolean bError = false;
		try{
			if (null == objID || objID.isEmpty()){
				bError = true;
			}else{
				id=Long.valueOf(objID);
			}
		}catch(Exception e){
			bError = true;
		}
		if (bError){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数错误！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		HashMap hm= new HashMap();
		hm.put("id", id);
		List<HashMap> listFacility = DBOperate.getFacilities(hm);
		if (null == listFacility || listFacility.size() < 1){
			hmRet.put("status", 400);
			hmRet.put("msg", "不存在指定的周边配套信息！");
		}else{
			if (!DBOperate.delFacility(id)){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
			}else{
				hmRet.put("status", 200);
			}
		}
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取指定项目的参考房价信息
	public void getHouse(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String projID = (String)request.getParameter("projid");
		HashMap hm = new HashMap();
		if (null != projID && !projID.isEmpty())
			hm.put("projID",projID);
		List<HashMap> listHouse = DBOperate.getHouses(hm);
		hmRet.put("status", 200);
		hmRet.put("rows", listHouse);											
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}
	
	//增加或修改项目周边参考房价信息
	public void editHouse(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		
		String operate = (String)request.getParameter("op");
		String objID = (String)request.getParameter("id");
		String projID = (String)request.getParameter("projID");
		String name = (String)request.getParameter("name");
		String usage = (String)request.getParameter("usage");
		String dist = (String)request.getParameter("dist");
		String open = (String)request.getParameter("open");
		String useYear = (String)request.getParameter("useYear");
		String openPrice = (String)request.getParameter("openPrice");
		String curPrice = (String)request.getParameter("curPrice");
		String isRent = (String)request.getParameter("isRent");
		String isNew = (String)request.getParameter("isNew");
		String type = (String)request.getParameter("type");
		String lngStr = (String)request.getParameter("lng");
		String latStr = (String)request.getParameter("lat");
		String addr = (String)request.getParameter("addr");
		
		Long id = null;
		boolean bError = false;
		HashMap hmValue = new HashMap();
		try{
			if (null == operate || operate.isEmpty()){
				bError = true;
			}else{ 
				if(operate.equals("add")){
					if (null == projID || projID.isEmpty() ||
							null == name || name.isEmpty() ||
							null == usage || usage.isEmpty() ||
							null == dist || dist.isEmpty() ||
							null == open || open.isEmpty() ||
							null == useYear || useYear.isEmpty() ||
							null == lngStr || lngStr.isEmpty() ||
							null == latStr || latStr.isEmpty()){
						bError = true;
					}else{
						float lng = Float.valueOf(lngStr);
						float lat = Float.valueOf(latStr);
					}
					hmValue.put("projID", projID);
				}else{
					if (null == objID || objID.isEmpty())
						bError = true;
					else{
						id = Long.valueOf(objID);
					}
					hmValue.put("id", id);
				}
			}
		}catch(Exception e){
			bError = true;
		}
		if (bError){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数错误！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		if (null != name && !name.isEmpty())
			hmValue.put("name", name);
		if (null != usage && !usage.isEmpty())
			hmValue.put("usage", usage);
		if (null != dist && !dist.isEmpty())
			hmValue.put("dist", dist);
		if (null != open && !open.isEmpty()){
			hmValue.put("open", open);
		}
		if (null != useYear && !useYear.isEmpty())
			hmValue.put("useYear", useYear);
		if (null != openPrice && !openPrice.isEmpty())
			hmValue.put("openPrice", openPrice);
		if (null != curPrice && !curPrice.isEmpty())
			hmValue.put("curPrice", curPrice);
		if (null != isRent && !isRent.isEmpty())
			hmValue.put("isRent", isRent.equals("1")?1:0);
		if (null != isNew && !isNew.isEmpty())
			hmValue.put("isNew", isNew.equals("1")?1:0);
		if (null != type && !type.isEmpty())
			hmValue.put("type", type);
		
		if (null != lngStr && !lngStr.isEmpty()){
			hmValue.put("lng",lngStr);
			hmValue.put("lat",latStr);
			if (null != addr)
				hmValue.put("addr", addr);
		}
		
		hmRet.put("status", 200);
		if (operate.equals("chg")){
			HashMap hm= new HashMap();
			hm.put("id", objID);
			List<HashMap> listHouse = DBOperate.getHouses(hm);
			if (null == listHouse || listHouse.size() < 1){
				hmRet.put("status", 400);
				hmRet.put("msg", "不存在指定的周边参考房价信息！");
				id=null;
			}else if (!DBOperate.updateHouse(hmValue)){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
				id=null;
			}
		}else{
			id = DBOperate.addHouse(hmValue);
			if (null == id){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
			}
		}
		if(id != null){
			HashMap hm= new HashMap();
			hm.put("id", id);
			List<HashMap> listHouse = DBOperate.getHouses(hm);
			if (null == listHouse || listHouse.size() < 1){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
			}else{
				hmRet.put("info",listHouse.get(0));
			}
		}
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//删除项目周边参考房价信息
	public void delHouse(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		
		String objID = (String)request.getParameter("id");
		Long id = null;
		boolean bError = false;
		try{
			if (null == objID || objID.isEmpty()){
				bError = true;
			}else{
				id=Long.valueOf(objID);
			}
		}catch(Exception e){
			bError = true;
		}
		if (bError){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数错误！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		HashMap hm= new HashMap();
		hm.put("id", id);
		List<HashMap> listHouse = DBOperate.getHouses(hm);
		if (null == listHouse || listHouse.size() < 1){
			hmRet.put("status", 400);
			hmRet.put("msg", "不存在指定的周边参考房价信息！");
		}else{
			if (!DBOperate.delHouse(id)){
				hmRet.put("status", 400);
				hmRet.put("msg", "数据库操作失败！");
			}else{
				hmRet.put("status", 200);
			}
		}
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有项目列表
	public void getArea(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		
		HashMap hm = new HashMap();
		hm.put("objType","area");
		if (null != getProjID){
			hm.put("objID",getProjID);
		}
		List<HashMap> listLocation = DBOperate.getLocation(hm);
		List<HashMap> listProject = DBOA.getProject(getProjID);		//项目基本信息
		List<HashMap> listFinancing = DBOA.statFinancing(getProjID);	//项目总融资
		List<HashMap> listLastNode = DBOA.lastProjectNode(getProjID);	//项目最后节点
		List<HashMap> listAbnormalCount = DBOA.statProjectAbnormal(getProjID);	//项目异常数
		if (null != listLocation){
			String[] readFields={
					"cProjName","cFullName","cProperty","fAcreage","dtCreate",
					"cSource","iYears","iPlannedAmount","dtPlannedOver","cStreet",
					"iFinancing","fPlotRatio","iInvestment","cStatus"
			};
			for(Iterator<HashMap> it=listLocation.iterator();it.hasNext();){
				HashMap location = it.next();
				String projID = (String)location.get("cObjID");
				boolean hasProject = false;
				if (null != listProject){
					for(int j=0;j<listProject.size();j++){
						HashMap proj = listProject.get(j);
						if (projID.equals(proj.get("cProjID").toString())){
							for(int k=0;k<readFields.length;k++){
								location.put(readFields[k], proj.get(readFields[k]));
							}
							hasProject = true;
							break;
						}
					}
				}
				if (!hasProject){
					it.remove();
				}else{
					if (null != listFinancing){
						for(int j =0;j<listFinancing.size();j++){
							HashMap financing = listFinancing.get(j);
							if (projID.equals(financing.get("cProjID").toString())){
								//已融资金额
								location.put("financing", financing.get("totalAmount"));
								break;
							}
						}
					}
					if (null != listLastNode){
						for(int j =0;j<listLastNode.size();j++){
							HashMap lastNode = listLastNode.get(j);
							if (projID.equals(lastNode.get("cProjID").toString())){
								//当前节点
								location.put("nodeName", lastNode.get("cNodeName"));
								break;
							}
						}
					}
					if (null != listAbnormalCount){
						for(int j =0;j<listAbnormalCount.size();j++){
							HashMap abnormal = listAbnormalCount.get(j);
							if (projID.equals(abnormal.get("cProjID").toString())){
								//异常数
								location.put("abnormalCount", abnormal.get("count"));
								break;
							}
						}
					}
				}
			}
		}
		hmRet.put("status", 200);
		hmRet.put("rows",listLocation);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有地块或指定项目的地块列表
	public void getMassif(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		String getMassifID = request.getParameter("massifid");
		if (null != getMassifID && getMassifID.isEmpty())
			getMassifID = null;
		HashMap hm = new HashMap();
		hm.put("objType","massif");
		if (null != getProjID){
			hm.put("projID",getProjID);
		}
		if (null != getMassifID){
			hm.put("objID",getMassifID);
		}
		List<HashMap> listLocation = DBOperate.getLocation(hm);
		List<HashMap> listMassif = DBOA.getMassif(getProjID, getMassifID);		//地块基本信息
		List<HashMap> listExpend = DBOA.statExpend(getProjID, getMassifID);		//地块总支出
		List<HashMap> listLastNode = DBOA.lastMassifNode(getProjID, getMassifID);	//地块最后节点
		List<HashMap> listAbnormalCount = DBOA.statMassifAbnormal(getProjID, getMassifID);	//地块异常数
		if (null != listLocation){
			String[] readFields={
					"cMassifName","cUsage","cCategory","fAcreage","cStyle",
					"fDensity","dtStart","fVolRate","iPlannedAmount","iNeedRemove",
					"fAgreeRate","iRemoved","fPrice","dtSupply","iSaleType",
					"fSalePrice","cPlanPhoto"
			};
			for(Iterator<HashMap> it=listLocation.iterator();it.hasNext();){
				HashMap location = it.next();
				String massifID = (String)location.get("cObjID");
				boolean hasMassif = false;
				if (null != listMassif){
					for(int j=0;j<listMassif.size();j++){
						HashMap massif = listMassif.get(j);
						if (massifID.equals(massif.get("cMassifID").toString())){
							for(int k=0;k<readFields.length;k++){
								location.put(readFields[k], massif.get(readFields[k]));
							}
							hasMassif = true;
							break;
						}
					}
				}
				if (!hasMassif){
					it.remove();
				}else{
					if (null != listExpend){
						for(int j =0;j<listExpend.size();j++){
							HashMap expend = listExpend.get(j);
							if (massifID.equals(expend.get("cMassifID").toString())){
								location.put("expend", expend.get("totalAmount"));
								break;
							}
						}
					}
					if (null != listLastNode){
						for(int j =0;j<listLastNode.size();j++){
							HashMap lastNode = listLastNode.get(j);
							if (massifID.equals(lastNode.get("cMassifID").toString())){
								location.put("nodeName", lastNode.get("cNodeName"));
								break;
							}
						}
					}
					if (null != listAbnormalCount){
						for(int j =0;j<listAbnormalCount.size();j++){
							HashMap abnormal = listAbnormalCount.get(j);
							if (massifID.equals(abnormal.get("cMassifID").toString())){
								location.put("abnormalCount", abnormal.get("count"));
								break;
							}
						}
					}
				}
			}
		}
		hmRet.put("status", 200);
		hmRet.put("rows",listLocation);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有或指定项目融资按月统计
	public void statFinancingMon(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		List<HashMap> listStat = DBOA.statFinancingMon(getProjID);
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有或指定项目或指定地块支出按月统计
	public void getExpendMon(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		String getMassifID = request.getParameter("massifid");
		if (null != getMassifID && getMassifID.isEmpty())
			getMassifID = null;
		List<HashMap> listStat = DBOA.statExpendMon(getProjID,getMassifID);
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}
	
	//获取所有或指定项目融资统计
	public void statFinancing(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		List<HashMap> listStat = DBOA.statFinancing(getProjID);
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有或指定项目或指定地块支出统计
	public void statExpend(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		String getMassifID = request.getParameter("massifid");
		if (null != getMassifID && getMassifID.isEmpty())
			getMassifID = null;
		List<HashMap> listStat = DBOA.statExpend(getProjID,getMassifID);
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}
	
	//获取指定项目的节点信息
	public void getProjectNodes(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty()){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数有误");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		List<HashMap> listStat = DBOA.getProjectNode(getProjID);
		if (null != listStat){
			Date now = new Date();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			for(int i=0;i<listStat.size();i++){
				String temp = (String)listStat.get(i).get("tmStart");
				Integer plannedDays = ((BigDecimal)listStat.get(i).get("iPlannedDays")).intValue();
				int realDays = 0;
				if (null != temp && !temp.isEmpty()){
					try{
						Date start = df.parse(temp);
						Date end = now;
						temp = (String)listStat.get(i).get("tmEnd");
						if (null != temp && !temp.isEmpty()){
							end = df.parse(temp);
						}
						long days = (end.getTime() - start.getTime())/1000/3600/24;
						realDays = (int)days;
					}catch(Exception e){
					}
				}
				if (null != plannedDays){
					listStat.get(i).put("diffDays", realDays - plannedDays);
				}else{
					listStat.get(i).put("diffDays", realDays);
				}
			}
		}
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取指定地块的节点信息
	public void getMassifNodes(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getMassifID = request.getParameter("massifid");
		if (null != getMassifID && getMassifID.isEmpty()){
			hmRet.put("status", 400);
			hmRet.put("msg", "参数有误");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		List<HashMap> listStat = DBOA.getMassifNode(null,getMassifID);
		if (null != listStat){
			Date now = new Date();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			for(int i=0;i<listStat.size();i++){
				String temp = (String)listStat.get(i).get("tmStart");
				Integer plannedDays = ((BigDecimal)listStat.get(i).get("iPlannedDays")).intValue();
				int realDays = 0;
				if (null != temp && !temp.isEmpty()){
					try{
						Date start = df.parse(temp);
						Date end = now;
						temp = (String)listStat.get(i).get("tmEnd");
						if (null != temp && !temp.isEmpty()){
							end = df.parse(temp);
						}
						long days = (end.getTime() - start.getTime())/1000/3600/24;
						realDays = (int)days;
					}catch(Exception e){
					}
				}
				if (null != plannedDays){
					listStat.get(i).put("diffDays", realDays - plannedDays);
				}else{
					listStat.get(i).put("diffDays", realDays);
				}
			}
		}
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有或指定项目异常信息
	public void getProjectAbnormal(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		List<HashMap> listStat = DBOA.getProjectAbnormal(getProjID);
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}

	//获取所有或指定地块异常信息
	public void getMassifAbnormal(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getMassifID = request.getParameter("massifid");
		if (null != getMassifID && getMassifID.isEmpty())
			getMassifID = null;
		List<HashMap> listStat = DBOA.getMassifAbnormal(null,getMassifID);
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}
	
	//获取所有或指定项目拆迁统计
	public void statRemove(HttpServletRequest request,HttpServletResponse response)
			throws ServletException,IOException{
		HashMap hmRet = new HashMap();
		SysUser user = (SysUser)request.getSession().getAttribute(GlobalConst.SESS_ATTR_SYSUSER);
		if (null == user){
			hmRet.put("status", 400);
			hmRet.put("msg", "请登录后操作！");
			String json = JSONObject.fromObject(hmRet).toString();
			response.getOutputStream().write(json.getBytes("UTF-8"));			
			return;
		}
		String getProjID = request.getParameter("projid");
		if (null != getProjID && getProjID.isEmpty())
			getProjID = null;
		List<HashMap> listStat = DBOA.statRemoveForProject(getProjID);
		hmRet.put("status", 200);
		hmRet.put("rows",listStat);
		String json = JSONObject.fromObject(hmRet).toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));			
	}
}
