/*
 * config:
 * 		label
 * 		labelNoJustify: true/false,default true
 *		labelWidth: default 60
 *		inputWidth: default 200,set 0 means set width outside
 * 		name: string or array
 * 		value: optional,matched to name for not select, is array for select
 * 		display: array,for select or radio or checkbox
 * 		default: default value,used to select or radio or checkbox(array)
 * 		linenum: line object number for radio or checkbox
 * 		onchange: changed event callback function
 * 		type: text,select,radio,checkbox
 * 		class
 * 		attr: json
 * set:
 * 		focus
 * 		value: string or array
 * get:
 * 		value: string or array(checkbox)
 */
$(function(){
	var jsPath = getJSPath("labelinput.js");
	$("<link>").attr(
		{
			rel: "stylesheet",
			type: "text/css",
			href: jsPath + "labelinput.css"
		}
	).appendTo("head");
});
function LabelinputModule(){
	this.name = "labelinput";
	this.para={};
	this.para["labelWidth"]= 60;
	this.para["inputWidth"] = 200;
	this.config = function(cfg){
		$.extend(this.para,cfg);
		if (null == this.para["type"] || undefined == this.para["type"]
			|| '' == this.para["type"])
			this.para["type"] = "text";
		if (null == this.para["class"] || undefined == this.para["class"])
			this.para["class"] = "";
		if (null != this.para["id"] && undefined != this.para["id"])
			this.id=this.para["id"];
		return this;
	};
	this.initDom = function(){
		if (null != this.mydom)
			return;
		this.mydom = $('<div class="LabelinputModule ' + this.para["class"] + '"></div>');
		if (this.id != '')
			this.mydom.attr('id',this.id);
		
		var inHtml = [];
		inHtml.push('<table><tr><td class="name">');
		if (null != this.para["label"] && undefined != this.para["label"]){
			var justifyClass = "";
			if (false != this.para["labelNoJustify"]){
				justifyClass = " justify";
			}
			inHtml.push('<div class="name'+justifyClass+'" style="width:');
			inHtml.push(this.para["labelWidth"]);
			inHtml.push('px;">');
			inHtml.push(this.para["label"]);
			inHtml.push('</div>');
		}
		inHtml.push('</td><td class="inputtd">');
		inHtml.push('<div class="inputdiv"');
		if (0 != this.para["inputWidth"]){
			inHtml.push(' style="');
			inHtml.push(this.para["inputWidth"]);
			inHtml.push('px;"');
		}
		inHtml.push('>');
		
		var defValue = null;
		if (null != this.para["default"] && undefined != this.para["default"])
			defValue = this.para["default"];
		var extAttr = "";
		if (isJson(this.para["attr"])){
			for(var item in this.para["attr"]){
				extAttr += ' '+item + '="' + this.para["attr"][item] + '"';
			}
		}
		if ("select" == this.para["type"]){
			inHtml.push('<select name="'+this.para["name"]+'"');
			if ('' != this.para["class"])
				inHtml.push(' class="'+this.para["class"]+'"');
			inHtml.push(extAttr);
			if (0 != this.para["inputWidth"]){
				inHtml.push(' style="width:'+this.para["inputWidth"]+'px;"');
			}
			inHtml.push('>');
			if(this.para["value"] instanceof Array){
				for(var i=0;i<this.para["value"].length;i++){
					inHtml.push('<option value="'+this.para["value"][i] +'"');
					if (null != defValue){
						if (defValue == this.para["value"][i])
							inHtml.push(' selected="selected"');
					}
					inHtml.push('>');
					inHtml.push(this.para["display"][i]);
					inHtml.push('</option>');
				}
			}
			inHtml.push('</select>');
		}else if ("radio" == this.para["type"] || "checkbox" == this.para["type"]){
			if(this.para["name"] instanceof Array){
				for(var i=0;i<this.para["name"].length;i++){
					var id="lbin-" + this.para["name"][i];
					inHtml.push('<input type="'+this.para["type"] + '"');
					inHtml.push(' id="' + id + '"');
					if ('' != this.para["class"])
						inHtml.push(' class="'+this.para["class"]+'"');
					inHtml.push(extAttr);
					inHtml.push(' name="'+this.para["name"][i] + '"');
					inHtml.push(' value="'+this.para["value"][i] + '"');
					if (null != defValue){
						if (defValue instanceof Array){
							if (defValue.indexOf(this.para["value"][i]) >= 0)
								inHtml.push(' checked="checked"');
						}else{
							if (defValue == this.para["value"][i])
								inHtml.push(' checked="checked"');
						}
					}
					inHtml.push('/>');
					inHtml.push('<label for="'+id+'">');
					inHtml.push(this.para["display"][i]);
					inHtml.push('</label>');
					if (typeof this.para["linenum"] == "number"){
						if ((i+1) % this.para["linenum"] == 0)
							inHtml.push('</p>');
					}
				}
			}else{
				var id="lbin-" + this.para["name"];
				inHtml.push('<input type="'+this.para["type"] + '"');
				inHtml.push(' id="' + id + '"');
				if ('' != this.para["class"])
					inHtml.push(' class="'+this.para["class"]+'"');
				inHtml.push(extAttr);
				inHtml.push(' name="'+this.para["name"] + '"');
				inHtml.push(' value="'+this.para["value"] + '"');
				if (null != defValue){
					if (defValue == this.para["value"])
						inHtml.push(' checked="checked"');
				}
				inHtml.push('/>');
				inHtml.push('<label for="'+id+'">');
				inHtml.push(this.para["display"]);
				inHtml.push('</label>');
			}
		}else if ("textarea" == this.para["type"]){
			inHtml.push('<textarea');
			inHtml.push(' name="'+this.para["name"] + '"');
			if ('' != this.para["class"])
				inHtml.push(' class="'+this.para["class"]+'"');
			inHtml.push(extAttr);
			if (0 != this.para["inputWidth"]){
				inHtml.push(' style="width:'+(this.para["inputWidth"] - 14)+'px;"');
			}
			inHtml.push('>');
			if (null != this.para["value"] && undefined != this.para["value"])
				inHtml.push(this.para["value"]);
			inHtml.push('</textarea>');
		}else{
			if(this.para["name"] instanceof Array){
				for(var i=0;i<this.para["name"].length;i++){
					var value ="";
					if (null != this.para["value"][i] && undefined != this.para["value"][i])
						value = this.para["value"][i];
					inHtml.push('<input type="'+this.para["type"] + '"');
					if ('' != this.para["class"])
						inHtml.push(' class="'+this.para["class"]+'"');
					inHtml.push(extAttr);
					inHtml.push(' name="'+this.para["name"][i] + '"');
					inHtml.push(' value="'+value + '"');
					if (0 != this.para["inputWidth"]){
						inHtml.push(' style="width:'+(this.para["inputWidth"] - 14)+'px;"');
					}
					inHtml.push('/>');
				}
			}else{
				inHtml.push('<input type="'+this.para["type"] + '"');
				if ('' != this.para["class"])
					inHtml.push(' class="'+this.para["class"]+'"');
				inHtml.push(extAttr);
				inHtml.push(' name="'+this.para["name"] + '"');
				if (null != this.para["value"] && undefined != this.para["value"])
					inHtml.push(' value="'+this.para["value"] + '"');
				if (0 != this.para["inputWidth"]){
					inHtml.push(' style="width:'+(this.para["inputWidth"] - 14)+'px;"');
				}
				inHtml.push('/>');
			}
		}
		inHtml.push('</div>');
		inHtml.push('</td></tr></table>');
		this.mydom.html(inHtml.join(''));
		if (typeof this.para["onchange"] == "function"){
			this.mydom.find('input').change(this.para["onchange"]);
			this.mydom.find('select').change(this.para["onchange"]);
			this.mydom.find('textarea').change(this.para["onchange"]);
			if (isIE() && ("radio" == this.para["type"] || "checkbox" == this.para["type"])){
				this.mydom.find('input').click(function(){this.blur();this.focus();});
			}
		}
	};
	this.render = function(dom){
		this.initDom();
		if (null == this.mydom)
			return;
		this.setParent(dom);
		if (null != this.parent)
			this.mydom.appendTo(this.parent);
		return this;
	};
	this.set = function(name,value){
		if (name == "focus")
			this.mydom.find('input').eq(0).focus();
		else if (name=="value"){
			if(value instanceof Array){
				if ("radio" == this.para["type"] || "checkbox" == this.para["type"]){
					for(var i=0;i<value.length;i++){
						this.mydom.find('input[value='+value[i]+']').prop('checked','checked');
					}
				}
			}else{
				if ("radio" == this.para["type"] || "checkbox" == this.para["type"]){
					this.mydom.find('input[value='+value+']').prop('checked','checked');
				}else{
					this.mydom.find('input').eq(0).val(value);
				}
			}
		}
		return this;
	};
	this.get=function(name){
		if (name=="value"){
			if ("radio" == this.para["type"]){
				return this.mydom.find('input:checked').val();
			}else if("checkbox" == this.para["type"]){
				var ret=[];
				this.mydom.find('input:checked').each(function(){
					ret.push($(this).val());
				});
				return ret;
			}else{
				return this.mydom.find('input').val();
			}
		}
	};
}
LabelinputModule.prototype = new Module();
