<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<%@ include file="global.jsp" %>
<title>项目周边配套</title>

<style type="text/css">
</style>

</head>

<body>
    <div id="container" class="container" tabindex="0"></div>
    <div id="lefttop">
    	<div id="buttonsDiv">
	    	<span class="button" id="addPoint" onclick="addPoint()">增加配套点</span>
	    	<span class="button" id="addPolygon" onclick="addPolygon()">增加配套区域</span>
	    	<span class="button" id="finishEdit" style="display:none" onclick="finishEdit()">编辑结束</span>
    	</div>
    	<div id="edittip" style="display:none;color:red;background:blue"></div>
    </div>
</body>

<script language="JavaScript">
var g_areaPolygon = null;
var g_curPoint = null;
var g_curPolygon = null;
var g_projID = '${projID}';
var g_curClickedObj = null;
var g_bSelPoint = false; 
var g_dlgObj = null;
var g_polygonEditor = null;
var g_newDrawPolygon = null;
$(function(){
	amapinit({
		type:"2D",
		show:"depart",
		domIDName:"container",
		clickfun:mapClick,
		complete:mapLoaded
	});
	initDlg();
});

function initDlg(){
	g_dlgObj = new DialogModule();
	g_dlgObj.config({
		id:"g_dlgObj",
		title:"增加周边配套信息",
		width: 440,
		height: 350,
		buttons:[
		    {
		    	text:"提 交",
		    	click:function(){
		    		commitFacility();
				}
			},
		    {
		    	text:"取 消",
		    	click:function(){
		    		g_dlgObj.set("close");
		    		if (null != g_newDrawPolygon){
		    			g_map.remove(g_newDrawPolygon);
		    			g_newDrawPolygon = null;
		    		}
				}
			}
		]
	});
	g_dlgObj.render();
	
	var dlgForm = $('<form></form>');
	dlgForm.append('<input type="hidden" name="op" value="add"/>');
	dlgForm.append('<input type="hidden" name="id"/>');
	dlgForm.append('<input type="hidden" name="projID"/>');
	dlgForm.append('<input type="hidden" name="locType"/>');
	dlgForm.append('<input type="hidden" name="lng"/>');
	dlgForm.append('<input type="hidden" name="lat"/>');
	dlgForm.append('<input type="hidden" name="addr"/>');
	dlgForm.append('<input type="hidden" name="polygon"/>');
	dlgForm.append('<input type="hidden" name="category" value="A3"/>');
	
	var labelWidth = 80;
	var inputWidth = 240;
	var $divLine = $('<div class="line"></div>');
	var labelInput = new LabelinputModule();
	labelInput.config({"label":"配套名称","labelWidth": labelWidth,
		"inputWidth":inputWidth,
		"class":"noempty maxlen",
		"attr":{"showname":"配套名称","maxlen":60},
		"name":"name"}).render($divLine);
	dlgForm.append($divLine);

	$divLine = $('<div class="line"></div>');
	labelInput = new LabelinputModule();
	labelInput.config({"label":"配套类型","labelWidth": labelWidth,
		"inputWidth":inputWidth,
		"type":"select",
		"display":g_largeType,
		"value":g_largeType,
		onchange: selLargeType,
		"class":"noempty",
		"name":"largetype"}).render($divLine);
	labelInput.mydom.find('input').attr('readonly','readonly');
	dlgForm.append($divLine);

	$divLine = $('<div class="line"></div>');
	labelInput = new LabelinputModule();
	labelInput.config({"label":"配套小类","labelWidth": labelWidth,
		"inputWidth":inputWidth,
		"type":"select",
		"display":g_unitType[0],
		"value":g_unitType[0],
		onchange: selUnitType,
		"class":"noempty",
		"name":"type"}).render($divLine);
	labelInput.mydom.find('input').attr('readonly','readonly');
	dlgForm.append($divLine);
	
	$divLine = $('<div class="line"></div>');
	labelInput = new LabelinputModule();
	labelInput.config({"label":"规模","labelWidth": labelWidth,
		"inputWidth":inputWidth,
		"class":"maxlen",
		"attr":{"showname":"规模","maxlen":60},
		"name":"scale"}).render($divLine);
	dlgForm.append($divLine);

	$divLine = $('<div class="line"></div>');
	labelInput = new LabelinputModule();
	labelInput.config({"label":"提交日期","labelWidth": labelWidth,
		"inputWidth":inputWidth,
		"class":"noempty datepicker",
		"attr":{"showname":"提交日期"},
		"name":"create"}).render($divLine);
	labelInput.mydom.find('input').attr('readonly','readonly');
	dlgForm.append($divLine);

	$divLine = $('<div class="line"></div>');
	labelInput = new LabelinputModule();
	labelInput.config({"label":"描述","labelWidth": labelWidth,
		"inputWidth":inputWidth,
		"class":"maxlen",
		"attr":{"showname":"描述","maxlen":100},
		"name":"remark"}).render($divLine);
	dlgForm.append($divLine);
	
	g_dlgObj.set("append",dlgForm);	
	
	init.initInput();
}
function selLargeType(){
	var val = g_dlgObj.mydom.find('select[name=largetype]').val();
	var index = -1;
	var selType = g_dlgObj.mydom.find('select[name=type]');
	selType.html('');
	for(var i=0;i<g_largeType.length;i++){
		if (g_largeType[i] == val){
			index = i;
			break;
		}
	}
	if (index >= 0){
		for(var i=0;i<g_unitType[index].length;i++){
			selType.append('<option value="'+g_unitType[index][i]+'">'+g_unitType[index][i]+'<option>');
		}
	}
}
function selUnitType(){
	var val = g_dlgObj.mydom.find('select[name=type]').val();
	var category = "";
	for(var i=0;i<g_unitType.length;i++){
		if (g_unitType[i] == val){
			category = g_unitCategory[i];
			break;
		}
	}
	g_dlgObj.mydom.find('input[name=category]').val(category);
}

function mapLoaded(){
	AMap.plugin("AMap.PolyEditor");
	
	if (null != g_projID && g_projID.length > 0){
		$.ajax({
			type : "post",
			url : '${urlhead}/ajax.html?ajax=getLocation',
			dataType : 'json',
			data: {'objtype':'area','objid':g_projID},
			timeout : 10000,
			success : function(msg, status) {
				if (msg.status == 200) {
					if (null != msg.data){
						if (msg.data.iLocType==2){
							var pts = eval('('+msg.data.cPolygon+')');
							g_areaPolygon = new AMap.Polygon({
						        path: pts,			//设置多边形边界路径
						        strokeColor: '#F00', //线颜色
						        strokeOpacity: 0.3, 	//线透明度
						        strokeWeight: 2,    //线宽
						        fillColor: '#F00', 	//填充色
						        fillOpacity: 0.1,	//填充透明度
						        bubble: true
						    });
							g_areaPolygon.setMap(g_map);
							
							readAlready();
						}else{
							noArea();
						}
					}else{
						noArea();
					}
				}else{
					showError(msg.msg);
				}
			},
			error: function(){
				showError('网络访问失败！');
			}
		});	
	}else{
		showError('参数错误！');
		$('#buttonsDiv').hide();
	}
}

function noArea(){
	showError("所属项目还没有设置区域，请先设置项目区域");
	$('#buttonsDiv').hide();
}

function readAlready(){
	$.ajax({
		type : "post",
		url : '${urlhead}/ajax.html?ajax=getFacility',
		dataType : 'json',
		data: {'projid':g_projID},
		timeout : 10000,
		success : function(msg, status) {
			if (msg.status == 200) {
				if (null != msg.rows){
					for(var i=0;i<msg.rows.length;i++){
						var info = msg.rows[i];
						if (info.iLocType == 2){
							addShowPolygon(info);
						}else if (info.iLocType == 1){
							addShowMarker(info);
						}
					}
				}
			}else{
				showError(msg.msg);
			}
			g_map.setFitView();
		},
		error: function(){
			showError('网络访问失败！');
		}
	});	
}
//在地图上增加显示多边形信息
function addShowPolygon(info){
	var pts = eval('('+info.cPolygon+')');
	var colorIndex = 0;
	for(var i=0;i<typeColors.length;i++){
		if (typeColors[i].type == info.cCategory){
			colorIndex = typeColors[i].colorno;
			break;
		}
	}
	var color = getIndexColor(colorIndex);
	var polygon = new AMap.Polygon({
        path: pts,			//设置多边形边界路径
        strokeColor: color, //线颜色
        strokeOpacity: 0.6, 	//线透明度
        strokeWeight: 2,    	//线宽
        fillColor: color, 	//填充色
        fillOpacity: 1,		//填充透明度
        bubble: true,
		extData: info
    });
	polygon.setMap(g_map);
	
	polygon.on('click',function(e){
		if (null != g_polygonEditor){
			showError("当前正在修改多边形！");
			return;
		}
		var data = this.getExtData();
		var html=[];
		html.push('<div class="infowindow">');
		html.push('<div class="infotitle">'+data.cName+'</div>');
		html.push('<div class="infoline">类型：'+ data.cType + '</div>');
		html.push('<div class="infoline">规模：'+ data.cScale + '</div>');
		html.push('<div class="infoline">提交时间：'+ data.dtCreate + '</div>');
		html.push('<div class="infoline">说明：'+ data.cRemark + '</div>');
		html.push('<div class="edit">');
		html.push('<span class="button infobutton" onclick="chgContent()">修改内容</span>');
		html.push('<span class="button infobutton" onclick="editPolygon()">编辑范围</span>');
		html.push('<span class="button infobutton" onclick="delFacility()">删除配套</span>');
		html.push('</div>');
		html.push('</div>');
		showInfoWindow(e.lnglat,html.join(''),new AMap.Pixel(0,0));
		g_curClickedObj = this;
	});
}
//在地图增加显示点信息
function addShowMarker(info){
	var ptMarker = new AMap.Marker({
		position: [info.fLng,info.fLat],
		title: info.cName,
		icon: "images/circle-blue-16.png",
		offset: new AMap.Pixel(-8,-8),
		extData: info
	});
	ptMarker.setTop(true);
	ptMarker.setMap(g_map);
	
	ptMarker.on('click',function(){
		if (null != g_polygonEditor){
			showError("当前正在修改多边形！");
			return;
		}
		var data = this.getExtData();
		var curPt = this.getPosition();
		var html=[];
		html.push('<div class="infowindow">');
		html.push('<div class="infotitle">'+data.cName+'</div>');
		html.push('<div class="infoline">类型：'+ data.cType + '</div>');
		html.push('<div class="infoline">规模：'+ data.cScale + '</div>');
		html.push('<div class="infoline">提交时间：'+ data.dtCreate + '</div>');
		html.push('<div class="infoline">地址：'+ data.cAddr + '</div>');
		html.push('<div class="infoline">坐标：');
		html.push(curPt.getLng()+' , '+curPt.getLat());
		html.push('</div>');
		html.push('<div class="infoline">说明：'+ data.cRemark + '</div>');
		html.push('<div class="edit">');
		html.push('<span class="button infobutton" onclick="chgContent()">修改内容</span>');
		html.push('<span class="button infobutton" onclick="movePoint()">移动位置</span>');
		html.push('<span class="button infobutton" onclick="delFacility()">删除配套</span>');
		html.push('</div>');
		html.push('</div>');
		showInfoWindow(curPt,html.join(''),new AMap.Pixel(0,-8));
		g_curClickedObj = this;
	});	
}
//信息基本信息
function chgContent(){
	closeInfoWindow();
	if (null == g_curClickedObj)
		return;
	var info = g_curClickedObj.getExtData();
	var form = g_dlgObj.mydom.find('form');
	form[0].reset();
	form.find('input[name=op]').val('chg');
	form.find('input[name=id]').val(info.iID);
	form.find('input[name=projID]').val(g_projID);
	form.find('input[name=locType]').val(info.iLocType);
	form.find('input[name=name]').val(info.cName);
	form.find('select[name=type]').val(info.cType);
	form.find('input[name=category]').val(info.cCategory);
	form.find('input[name=scale]').val(info.cScale);
	form.find('input[name=create]').val(info.dtCreate);
	form.find('input[name=remark]').val(info.cRemark);
	g_dlgObj.set('title','修改周边配套信息');
	g_dlgObj.set("open");
}
//移动点位置
function movePoint(){
	closeInfoWindow();
	g_bSelPoint = true;
	$('#edittip').html("请在地图上选择新的位置");
	$('#edittip').show();
	$('#buttonsDiv').hide();
}
//删除周边配套信息
function delFacility(){
	closeInfoWindow();
	if(null == g_curClickedObj)
		return;
	showConfirm('确定删除选择的周边配套信息吗？',function(sure,id){
		if (!sure)
			return;
		$.ajax({
			type : "post",
			url : '${urlhead}/ajax.html?ajax=delFacility',
			dataType : 'json',
			data: {'id':id},
			timeout : 10000,
			success : function(msg, status) {
				if (msg.status == 200) {
					showMessage("删除周边配套成功");
					g_map.remove(g_curClickedObj);
					g_curClickedObj = null;
				}else{
					showError(msg.msg);
				}
			},
			error: function(){
				showError('网络访问失败！');
			}
		});	
	},g_curClickedObj.getExtData().iID);
}
//开始多边形编辑
function editPolygon(){
	closeInfoWindow();
	g_bSelPoint = false;
	if(null == g_curClickedObj)
		return;
	g_polygonEditor= new AMap.PolyEditor(g_map, g_curClickedObj);
	g_polygonEditor.open();
	$('#finishEdit').show();
	$('#addPoint').hide();
	$('#addPolygon').hide();
}
//多边形编辑结束
function finishEdit(){
	//提交修改的多边形信息
	commitEditPolygon();
}
function commitEditPolygon(){
	if(null == g_curClickedObj)
		return;
	var info = g_curClickedObj.getExtData();
	var data={};
	data.id=info.iID;
	data.op="chg";
	data.locType = 2;
	data.polygon = getPolygonPtList(g_curClickedObj);
	$.ajax({
		type : "post",
		url : '${urlhead}/ajax.html?ajax=editFacility',
		dataType : 'json',
		data: data,
		timeout : 10000,
		success : function(msg, status) {
			if (msg.status == 200) {
				showMessage("提交修改多边形区域成功");
				g_polygonEditor.close();
				g_polygonEditor = null;
				$('#finishEdit').hide();
				$('#addPoint').show();
				$('#addPolygon').show();
			}else{
				showError(msg.msg);
			}
		},
		error: function(){
			showError('网络访问失败！');
		}
	});		
}

//增加新的位置
function addPointInfo(point,formatAddr){
	g_dlgObj.mydom.find('form')[0].reset();
	g_dlgObj.set('title','增加周边配套信息');
	g_dlgObj.mydom.find('input[name=op]').val('add');
	g_dlgObj.mydom.find('input[name=id]').val('');
	g_dlgObj.mydom.find('input[name=projID]').val(g_projID);
	g_dlgObj.mydom.find('input[name=locType]').val(1);
	g_dlgObj.mydom.find('input[name=lng]').val(point[0]);
	g_dlgObj.mydom.find('input[name=lat]').val(point[1]);
	g_dlgObj.mydom.find('input[name=addr]').val(formatAddr);
	g_dlgObj.set("open");
}
//增加新的范围
function addPolygonInfo(polygon){
	g_dlgObj.mydom.find('form')[0].reset();
	g_dlgObj.set('title','增加周边配套信息');
	g_dlgObj.mydom.find('input[name=op]').val('add');
	g_dlgObj.mydom.find('input[name=id]').val('');
	g_dlgObj.mydom.find('input[name=projID]').val(g_projID);
	g_dlgObj.mydom.find('input[name=locType]').val(2);
	var polygonStr=getPolygonPtList(polygon);
	g_dlgObj.mydom.find('input[name=polygon]').val(polygonStr);
	g_dlgObj.set("open");
	
	g_newDrawPolygon = polygon;
}

function addPoint(){
	g_bSelPoint = true;
	g_curClickedObj = null;
	$('#edittip').html("请在地图上点击来增加配套信息");
	$('#edittip').show();
	$('#buttonsDiv').hide();
}
//地图上点击，增加配套点信息
function mapClick(pt,formatAddr){
	if (true != g_bSelPoint)
		return;
	$('#edittip').hide();
	$('#buttonsDiv').show();
	
	g_bSelPoint = false;
	var info = null;
	if (null != g_curClickedObj){
		info = g_curClickedObj.getExtData();
		if (info.iLocType == 1){
			//提交后台修改点位置信息
			var data={};
			data.id=info.iID;
			data.op="chg";
			data.locType = 1;
			data.lng = pt[0];
			data.lat = pt[1];
			data.addr = formatAddr;
			$.ajax({
				type : "post",
				url : '${urlhead}/ajax.html?ajax=editFacility',
				dataType : 'json',
				data: data,
				timeout : 10000,
				success : function(msg, status) {
					if (msg.status == 200) {
						showMessage("提交修改位置成功");
						g_map.remove(g_curClickedObj);
						g_curClickedObj = null;
						var infoT = msg.info;
						addShowMarker(infoT);
					}else{
						showError(msg.msg);
					}
				},
				error: function(){
					showError('网络访问失败！');
				}
			});	
		}else{
			info = null;			
			g_curClickedObj = null;
		}
	}
	if (null == info){
		addPointInfo(pt,formatAddr);
	}
}

function addPolygon(){
	g_bSelPoint = false;
	g_curClickedObj = null;
	startDraw("polygon",drawOver);
	$('#edittip').html("请在地图上用鼠标画出多边形区域，双击或右击结束");
	$('#edittip').show();
	$('#buttonsDiv').hide();
}
function drawOver(polygon){
	g_bSelPoint = false;
	$('#edittip').hide();
	$('#buttonsDiv').show();
	addPolygonInfo(polygon);
}

function commitFacility(){
	if (!checkForm($('#g_dlgObj form')))
		return;
	var data = $('#g_dlgObj form').serialize();
	$.ajax({
		type : "post",
		url : '${urlhead}/ajax.html?ajax=editFacility',
		dataType : 'json',
		data: data,
		timeout : 10000,
		success : function(msg, status) {
			if (msg.status == 200) {
				showMessage("周边配套提交成功");
				var info = msg.info;
				if ('add' == g_dlgObj.mydom.find('input[name=op]').val()){
					if (info.iLocType == 2){
						addShowPolygon(info);
					}else if (info.iLocType == 1){
						addShowMarker(info);
					}
				}else if (null != g_curClickedObj){
					g_curClickedObj.setExtData(info);
				}
				
	    		g_dlgObj.set("close");
	    		if (null != g_newDrawPolygon){
	    			g_map.remove(g_newDrawPolygon);
	    			g_newDrawPolygon = null;
	    		}
			}else{
				showError(msg.msg);
			}
		},
		error: function(){
			showError('网络访问失败！');
		}
	});	
}
</script>

</html>
